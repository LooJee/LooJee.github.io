<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>golang on chit-chat</title>
    <link>http://blog.cybermilly.com/categories/golang/</link>
    <description>Recent content in golang on chit-chat</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <managingEditor>geekerekeep@gmail.com (Jonathan Lu)</managingEditor>
    <webMaster>geekerekeep@gmail.com (Jonathan Lu)</webMaster>
    <copyright>&amp;copy;2019~time.Now(), All Rights Reserved</copyright>
    <lastBuildDate>Mon, 22 Mar 2021 11:58:09 +0800</lastBuildDate>
    
        <atom:link href="http://blog.cybermilly.com/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Design Pattern With Go: Singleton</title>
        <link>http://blog.cybermilly.com/posts/design-pattern-with-go-singleton/</link>
        <pubDate>Mon, 22 Mar 2021 11:58:09 +0800</pubDate>
        <author>geekerekeep@gmail.com (Jonathan Lu)</author>
        <atom:modified>Mon, 22 Mar 2021 11:58:09 +0800</atom:modified>
        <guid>http://blog.cybermilly.com/posts/design-pattern-with-go-singleton/</guid>
        <description>定义 一个类只允许创建一个对象（或者实例），那这个类就是一个单例类，这种设计模式就叫作单例模式。当某些数据只需要在系统中保留一份的时候，可以选</description>
        
        <dc:creator>Jonathan Lu</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
            
              <category>design-pattern</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
            
              <category>design-pattern</category>
            
          
        
        
      </item>
      
      <item>
        <title>golang 中 time 包的时区问题</title>
        <link>http://blog.cybermilly.com/87.html</link>
        <pubDate>Fri, 24 May 2019 16:16:49 +0000</pubDate>
        <author>geekerekeep@gmail.com (Jonathan Lu)</author>
        <atom:modified>Fri, 24 May 2019 16:16:49 +0000</atom:modified>
        <guid>http://blog.cybermilly.com/87.html</guid>
        <description>最近项目中有一个功能，是定时从远端服务器同步数据到本地，数据中有一个字段是时间格式的。每次我的同步程序从服务器上获取到数据和本地数据库保存的</description>
        
        <dc:creator>Jonathan Lu</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
        
        
      </item>
      
      <item>
        <title>golang 中 for range 的问题</title>
        <link>http://blog.cybermilly.com/75.html</link>
        <pubDate>Wed, 17 Apr 2019 14:21:09 +0000</pubDate>
        <author>geekerekeep@gmail.com (Jonathan Lu)</author>
        <atom:modified>Wed, 17 Apr 2019 14:21:09 +0000</atom:modified>
        <guid>http://blog.cybermilly.com/75.html</guid>
        <description>最近项目在使用 golang 开发，对于一直使用 c 开发的我来说 golang 有着十分强大的内置库，生态也还可以，使用起来确实十分的舒适，最重要的是不需要手动管理内存，</description>
        
        <dc:creator>Jonathan Lu</dc:creator>
        
        
        
        
          
            
              <category>golang</category>
            
          
        
        
          
            
              <category>golang</category>
            
          
            
              <category>编程杂记</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>